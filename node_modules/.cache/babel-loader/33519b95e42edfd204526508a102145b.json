{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hamma\\\\Desktop\\\\CopyOfWindowPopUP\\\\Automation\\\\automatter\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\n//     /*global chrome*/\n// import { useState } from \"react\";\n// import \"./App.css\"\n// import Schema from \"./Schema\"\n// import ReactDOM from \"react-dom\";\n// import React from \"react\";\n// function App() {\n//   const [clickStream, setClickStream] = useState([\"Div\", \"Input\", \"SVG\"]);\n// //   chrome.runtime.onMessage.addListener((request, sender,sendResponse)=>{\n// //     console.log(request)\n// //     setClickStream([...clickStream, request.elementDetected])\n// //     sendResponse(\"I have received your message\");\n// //   })\n// // var SiteTabId;  \n//   const sendMessageToContentScript = (ToDO) => {\n//           // console.log(\"Sending Message to Content Script\")\n//           // chrome.tabs.query({active: true}, function(tabs){\n//           //   SiteTabId = tabs[0].id\n//           //   chrome.tabs.sendMessage(SiteTabId, {Recording: ToDO}, function(response){\n//           //     console.log(response)\n//           //   });\n//         // });\n//   }\n//   return (\n// <>\n//   <div>\n//   <button onClick = {() => sendMessageToContentScript('Start')}>Start</button>\n//   <br></br>\n//   <button onClick = {() => sendMessageToContentScript('Pause')}>Pause</button>\n//   <br></br>\n//   <button onClick = {() => sendMessageToContentScript('Stop')}>Stop</button>\n//   <br></br>\n//   <br></br>\n//   <ul>\n//                 {clickStream.map(function(name, index){\n//                     return <li key={ index }>{name}   \n//                     <br></br>\n//                     <br></br>\n//                     <hr></hr>\n//                     <hr></hr>\n//                     </li>;\n//                   })}\n//   </ul>\n//   </div>\n// </>\n//       );\n// }\n// export default App;\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { DropDownList } from \"@progress/kendo-react-dropdowns\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EventsLogger = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"example-config\",\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Event log\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"event-log\",\n      style: {\n        textAlign: \"right\"\n      },\n      children: props.events.map((event, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: event\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 16\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 10\n  }, this);\n};\n\n_c = EventsLogger;\n\nconst App = () => {\n  _s();\n\n  const source = [\"Albania\", \"Andorra\", \"Armenia\", \"Austria\", \"Azerbaijan\"];\n  const [events, setEvents] = React.useState([]);\n\n  const log = (event, arg) => {\n    const eventsLog = [...events];\n    eventsLog.unshift(`${event} ${arg || \"\"}`);\n    setEvents(eventsLog);\n  };\n\n  const onOpen = () => {\n    log(\"open\", null);\n  };\n\n  const onClose = () => {\n    log(\"close\", null);\n  };\n\n  const onFocus = () => {\n    log(\"focus\", null);\n  };\n\n  const onBlur = () => {\n    log(\"blur\", null);\n  };\n\n  const onChange = event => {\n    log(\"change\", event.target.value);\n  };\n\n  const onFilterChange = event => {\n    log(\"filterChange\", event.filter.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(DropDownList, {\n      data: source,\n      onOpen: onOpen,\n      onClose: onClose,\n      onFocus: onFocus,\n      onBlur: onBlur,\n      onChange: onChange,\n      onFilterChange: onFilterChange,\n      filterable: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 10\n  }, this);\n};\n\n_s(App, \"fh+hzEDekCPeegwQh0J56A4r3Ew=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EventsLogger\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["C:/Users/hamma/Desktop/CopyOfWindowPopUP/Automation/automatter/src/App.js"],"names":["React","ReactDOM","DropDownList","EventsLogger","props","textAlign","events","map","event","index","App","source","setEvents","useState","log","arg","eventsLog","unshift","onOpen","onClose","onFocus","onBlur","onChange","target","value","onFilterChange","filter"],"mappings":"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","sourcesContent":["//     /*global chrome*/\n\n// import { useState } from \"react\";\n// import \"./App.css\"\n// import Schema from \"./Schema\"\n// import ReactDOM from \"react-dom\";\n// import React from \"react\";\n// function App() {\n\n\n//   const [clickStream, setClickStream] = useState([\"Div\", \"Input\", \"SVG\"]);\n\n\n// //   chrome.runtime.onMessage.addListener((request, sender,sendResponse)=>{\n    \n// //     console.log(request)\n// //     setClickStream([...clickStream, request.elementDetected])\n// //     sendResponse(\"I have received your message\");\n// //   })\n// // var SiteTabId;  \n//   const sendMessageToContentScript = (ToDO) => {\n\n\n//           // console.log(\"Sending Message to Content Script\")\n\n//           // chrome.tabs.query({active: true}, function(tabs){\n//           //   SiteTabId = tabs[0].id\n//           //   chrome.tabs.sendMessage(SiteTabId, {Recording: ToDO}, function(response){\n            \n//           //     console.log(response)\n//           //   });\n         \n\n\n//         // });\n    \n       \n\n   \n    \n//   }\n\n//   return (\n\n// <>\n\n\n//   <div>\n//   <button onClick = {() => sendMessageToContentScript('Start')}>Start</button>\n//   <br></br>\n//   <button onClick = {() => sendMessageToContentScript('Pause')}>Pause</button>\n//   <br></br>\n//   <button onClick = {() => sendMessageToContentScript('Stop')}>Stop</button>\n//   <br></br>\n//   <br></br>\n  \n//   <ul>\n//                 {clickStream.map(function(name, index){\n//                     return <li key={ index }>{name}   \n//                     <br></br>\n//                     <br></br>\n//                     <hr></hr>\n//                     <hr></hr>\n//                     </li>;\n//                   })}\n//   </ul>\n\n//   </div>\n// </>\n\n//       );\n// }\n\n// export default App;\n\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { DropDownList } from \"@progress/kendo-react-dropdowns\";\n\nconst EventsLogger = props => {\n  return <div className=\"example-config\">\n      <h5>Event log</h5>\n      <ul className=\"event-log\" style={{\n      textAlign: \"right\"\n    }}>\n        {props.events.map((event, index) => {\n        return <li key={index}>{event}</li>;\n      })}\n      </ul>\n    </div>;\n};\n\nconst App = () => {\n  const source = [\"Albania\", \"Andorra\", \"Armenia\", \"Austria\", \"Azerbaijan\"];\n  const [events, setEvents] = React.useState([]);\n\n  const log = (event, arg) => {\n    const eventsLog = [...events];\n    eventsLog.unshift(`${event} ${arg || \"\"}`);\n    setEvents(eventsLog);\n  };\n\n  const onOpen = () => {\n    log(\"open\", null);\n  };\n\n  const onClose = () => {\n    log(\"close\", null);\n  };\n\n  const onFocus = () => {\n    log(\"focus\", null);\n  };\n\n  const onBlur = () => {\n    log(\"blur\", null);\n  };\n\n  const onChange = event => {\n    log(\"change\", event.target.value);\n  };\n\n  const onFilterChange = event => {\n    log(\"filterChange\", event.filter.value);\n  };\n\n  return <div>\n      <DropDownList data={source} onOpen={onOpen} onClose={onClose} onFocus={onFocus} onBlur={onBlur} onChange={onChange} onFilterChange={onFilterChange} filterable={true} />\n      <br />\n      <br />\n      {/* <EventsLogger events={events} /> */}\n    </div>;\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}